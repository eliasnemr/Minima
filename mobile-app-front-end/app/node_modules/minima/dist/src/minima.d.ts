/**
* Minima JS lib for MiniDAPPs..
*
* Includes the Decimal.js lib for precise Maths.
*
* @spartacusrex
*/
export interface Token {
    tokenid: string;
    token: string;
    total: string;
    sendable: string;
    unconfirmed: string;
    confirmed: string;
    mempool: string;
    coinid?: string;
    totalamount?: string;
    scale?: string;
    description?: string;
    icon?: string;
    proof?: string;
    script?: string;
}
interface Response {
    status: boolean;
    message: string;
    minifunc: string;
}
interface State {
    port: string;
    data: string;
}
declare type Callback = (jsonresp: any) => void;
/**
 * Main MINIMA Object for all interaction
 */
declare const Minima: {
    /**
     * Current Minima Block Height
     */
    block: number;
    /**
     * The Full TxPoW Top Block
     */
    txpow: {};
    /**
     * Current Balance of this User
     */
    balance: Token[];
    /**
     * The MiniDAPP ID
     */
    minidappid: string;
    webhost: string;
    rpchost: string;
    wshost: string;
    logging: boolean;
    debug: boolean;
    showmining: boolean;
    /**
     * Minima Startup - with the callback function used for all Minima messages
     */
    init: (callback: Callback) => void;
    /**
     * Log some data with a timestamp in a consistent manner to the console
     */
    log: (output: string) => void;
    /**
     * Notify the user with a Pop up message
     */
    notify: (message: string, bgcolor: string) => void;
    /**
     * Runs a function on the Minima Command Line
     */
    cmd: (minifunc: string, callback: Callback) => void;
    /**
     * Run SQL
     */
    sql: (query: string, callback: Callback) => void;
    /**
     * NETWORK Functions
     */
    net: {
        onInbound: (port: string, onReceivecallback: Callback) => void;
        start: (port: string) => void;
        stop: (port: string) => void;
        broadcast: (port: string, text: string) => void;
        onOutbound: (hostport: string, onReceivecallback: Callback) => void;
        connect: (hostport: string) => void;
        disconnect: (UID: string) => void;
        send: (UID: string, text: string) => void;
        info: () => void;
        stats: (callback: Callback) => void;
        GET: (url: string, callback: Callback) => void;
        POST: (url: string, params: string, callback: Callback) => void;
    };
    /**
     * FILE Functions - no spaces allowed in filenames
     */
    file: {
        save: (text: string, file: string, callback: Callback) => void;
        load: (file: string, callback: Callback) => void;
        saveHEX: (hextext: string, file: string, callback: Callback) => void;
        loadHEX: (file: string, callback: Callback) => void;
        copy: (file: string, newfile: string, callback: Callback) => void;
        move: (file: string, newfile: string, callback: Callback) => void;
        list: (file: string, callback: Callback) => void;
        delete: (file: string, callback: Callback) => void;
    };
    /**
     * Form GET / POST parameters..
     */
    form: {
        params: (paramname: string) => void;
        getParams: (parameterName: string) => string | null;
    };
    /**
     * Intra MiniDAPP communication
     */
    minidapps: {
        list: (callback: Callback) => void;
        listen: (onReceivecallback: Callback) => void;
        send: (minidappid: string, message: string, callback: Callback) => void;
        reply: (replyid: string, message: string) => void;
    };
    /**
     * UTILITY FUNCTIONS
     */
    util: {
        getBalance: (tokenid: string) => string;
        checkAllResponses: (responses: Response[]) => boolean;
        getStateVariable: (statelist: State[], port: string) => string | null;
    };
};
export { Minima };
//# sourceMappingURL=minima.d.ts.map