"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _core = require("@stencil/core");

var _ionicGlobal = require("../../global/ionic-global");

var _helpers = require("../../utils/helpers");

var _theme = require("../../utils/theme");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @virtualProp {"ios" | "md"} mode - The mode determines which platform styles to use.
 *
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot icon-only - Should be used on an icon in a button that has no text.
 * @slot start - Content is placed to the left of the button text in LTR, and to the right in RTL.
 * @slot end - Content is placed to the right of the button text in LTR, and to the left in RTL.
 *
 * @part native - The native HTML button or anchor element that wraps all child elements.
 */
var Button =
/*#__PURE__*/
function () {
  function Button() {
    var _this = this;

    _classCallCheck(this, Button);

    this.inItem = false;
    this.inListHeader = false;
    this.inToolbar = false;
    this.inheritedAttributes = {};
    /**
     * The type of button.
     */

    this.buttonType = 'button';
    /**
     * If `true`, the user cannot interact with the button.
     */

    this.disabled = false;
    /**
     * When using a router, it specifies the transition direction when navigating to
     * another page using `href`.
     */

    this.routerDirection = 'forward';
    /**
     * If `true`, activates a button with a heavier font weight.
     */

    this.strong = false;
    /**
     * The type of the button.
     */

    this.type = 'button';

    this.handleClick = function (ev) {
      if (_this.type === 'button') {
        (0, _theme.openURL)(_this.href, ev, _this.routerDirection, _this.routerAnimation);
      } else if ((0, _helpers.hasShadowDom)(_this.el)) {
        // this button wants to specifically submit a form
        // climb up the dom to see if we're in a <form>
        // and if so, then use JS to submit it
        var form = _this.el.closest('form');

        if (form) {
          ev.preventDefault();
          var fakeButton = document.createElement('button');
          fakeButton.type = _this.type;
          fakeButton.style.display = 'none';
          form.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };

    this.onFocus = function () {
      _this.ionFocus.emit();
    };

    this.onBlur = function () {
      _this.ionBlur.emit();
    };
  }

  _createClass(Button, [{
    key: "componentWillLoad",
    value: function componentWillLoad() {
      this.inToolbar = !!this.el.closest('ion-buttons');
      this.inListHeader = !!this.el.closest('ion-list-header');
      this.inItem = !!this.el.closest('ion-item') || !!this.el.closest('ion-item-divider');
      this.inheritedAttributes = (0, _helpers.inheritAttributes)(this.el, ['aria-label']);
    }
  }, {
    key: "render",
    value: function render() {
      var _createColorClasses;

      var mode = (0, _ionicGlobal.getIonMode)(this);
      var buttonType = this.buttonType,
          type = this.type,
          disabled = this.disabled,
          rel = this.rel,
          target = this.target,
          size = this.size,
          href = this.href,
          color = this.color,
          expand = this.expand,
          hasIconOnly = this.hasIconOnly,
          shape = this.shape,
          strong = this.strong,
          inheritedAttributes = this.inheritedAttributes;
      var finalSize = size === undefined && this.inItem ? 'small' : size;
      var TagType = href === undefined ? 'button' : 'a';
      var attrs = TagType === 'button' ? {
        type: type
      } : {
        download: this.download,
        href: href,
        rel: rel,
        target: target
      };
      var fill = this.fill;

      if (fill === undefined) {
        fill = this.inToolbar || this.inListHeader ? 'clear' : 'solid';
      }

      return (0, _core.h)(_core.Host, {
        onClick: this.handleClick,
        "aria-disabled": disabled ? 'true' : null,
        class: (0, _theme.createColorClasses)(color, (_createColorClasses = {}, _defineProperty(_createColorClasses, mode, true), _defineProperty(_createColorClasses, buttonType, true), _defineProperty(_createColorClasses, "".concat(buttonType, "-").concat(expand), expand !== undefined), _defineProperty(_createColorClasses, "".concat(buttonType, "-").concat(finalSize), finalSize !== undefined), _defineProperty(_createColorClasses, "".concat(buttonType, "-").concat(shape), shape !== undefined), _defineProperty(_createColorClasses, "".concat(buttonType, "-").concat(fill), true), _defineProperty(_createColorClasses, "".concat(buttonType, "-strong"), strong), _defineProperty(_createColorClasses, 'in-toolbar', (0, _theme.hostContext)('ion-toolbar', this.el)), _defineProperty(_createColorClasses, 'in-toolbar-color', (0, _theme.hostContext)('ion-toolbar[color]', this.el)), _defineProperty(_createColorClasses, 'button-has-icon-only', hasIconOnly), _defineProperty(_createColorClasses, 'button-disabled', disabled), _defineProperty(_createColorClasses, 'ion-activatable', true), _defineProperty(_createColorClasses, 'ion-focusable', true), _createColorClasses))
      }, (0, _core.h)(TagType, Object.assign({}, attrs, {
        class: "button-native",
        part: "native",
        disabled: disabled,
        onFocus: this.onFocus,
        onBlur: this.onBlur
      }, inheritedAttributes), (0, _core.h)("span", {
        class: "button-inner"
      }, (0, _core.h)("slot", {
        name: "icon-only"
      }), (0, _core.h)("slot", {
        name: "start"
      }), (0, _core.h)("slot", null), (0, _core.h)("slot", {
        name: "end"
      })), mode === 'md' && (0, _core.h)("ion-ripple-effect", {
        type: this.rippleType
      })));
    }
  }, {
    key: "hasIconOnly",
    get: function get() {
      return !!this.el.querySelector('[slot="icon-only"]');
    }
  }, {
    key: "rippleType",
    get: function get() {
      var hasClearFill = this.fill === undefined || this.fill === 'clear'; // If the button is in a toolbar, has a clear fill (which is the default)
      // and only has an icon we use the unbounded "circular" ripple effect

      if (hasClearFill && this.hasIconOnly && this.inToolbar) {
        return 'unbounded';
      }

      return 'bounded';
    }
  }], [{
    key: "is",
    get: function get() {
      return "ion-button";
    }
  }, {
    key: "encapsulation",
    get: function get() {
      return "shadow";
    }
  }, {
    key: "originalStyleUrls",
    get: function get() {
      return {
        "ios": ["button.ios.scss"],
        "md": ["button.md.scss"]
      };
    }
  }, {
    key: "styleUrls",
    get: function get() {
      return {
        "ios": ["button.ios.css"],
        "md": ["button.md.css"]
      };
    }
  }, {
    key: "properties",
    get: function get() {
      return {
        "color": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "Color",
            "resolved": "string | undefined",
            "references": {
              "Color": {
                "location": "import",
                "path": "../../interface"
              }
            }
          },
          "required": false,
          "optional": true,
          "docs": {
            "tags": [],
            "text": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics)."
          },
          "attribute": "color",
          "reflect": false
        },
        "buttonType": {
          "type": "string",
          "mutable": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "The type of button."
          },
          "attribute": "button-type",
          "reflect": false,
          "defaultValue": "'button'"
        },
        "disabled": {
          "type": "boolean",
          "mutable": false,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "If `true`, the user cannot interact with the button."
          },
          "attribute": "disabled",
          "reflect": true,
          "defaultValue": "false"
        },
        "expand": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "'full' | 'block'",
            "resolved": "\"block\" | \"full\" | undefined",
            "references": {}
          },
          "required": false,
          "optional": true,
          "docs": {
            "tags": [],
            "text": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders."
          },
          "attribute": "expand",
          "reflect": true
        },
        "fill": {
          "type": "string",
          "mutable": true,
          "complexType": {
            "original": "'clear' | 'outline' | 'solid' | 'default'",
            "resolved": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined",
            "references": {}
          },
          "required": false,
          "optional": true,
          "docs": {
            "tags": [],
            "text": "Set to `\"clear\"` for a transparent button, to `\"outline\"` for a transparent\nbutton with a border, or to `\"solid\"`. The default style is `\"solid\"` except inside of\na toolbar, where the default is `\"clear\"`."
          },
          "attribute": "fill",
          "reflect": true
        },
        "routerDirection": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "RouterDirection",
            "resolved": "\"back\" | \"forward\" | \"root\"",
            "references": {
              "RouterDirection": {
                "location": "import",
                "path": "../../interface"
              }
            }
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`."
          },
          "attribute": "router-direction",
          "reflect": false,
          "defaultValue": "'forward'"
        },
        "routerAnimation": {
          "type": "unknown",
          "mutable": false,
          "complexType": {
            "original": "AnimationBuilder | undefined",
            "resolved": "((baseEl: any, opts?: any) => Animation) | undefined",
            "references": {
              "AnimationBuilder": {
                "location": "import",
                "path": "../../interface"
              }
            }
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`."
          }
        },
        "download": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want)."
          },
          "attribute": "download",
          "reflect": false
        },
        "href": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered."
          },
          "attribute": "href",
          "reflect": false
        },
        "rel": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."
          },
          "attribute": "rel",
          "reflect": false
        },
        "shape": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "'round'",
            "resolved": "\"round\" | undefined",
            "references": {}
          },
          "required": false,
          "optional": true,
          "docs": {
            "tags": [],
            "text": "The button shape."
          },
          "attribute": "shape",
          "reflect": true
        },
        "size": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "'small' | 'default' | 'large'",
            "resolved": "\"default\" | \"large\" | \"small\" | undefined",
            "references": {}
          },
          "required": false,
          "optional": true,
          "docs": {
            "tags": [],
            "text": "The button size."
          },
          "attribute": "size",
          "reflect": true
        },
        "strong": {
          "type": "boolean",
          "mutable": false,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "If `true`, activates a button with a heavier font weight."
          },
          "attribute": "strong",
          "reflect": false,
          "defaultValue": "false"
        },
        "target": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "string | undefined",
            "resolved": "string | undefined",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`."
          },
          "attribute": "target",
          "reflect": false
        },
        "type": {
          "type": "string",
          "mutable": false,
          "complexType": {
            "original": "'submit' | 'reset' | 'button'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "required": false,
          "optional": false,
          "docs": {
            "tags": [],
            "text": "The type of the button."
          },
          "attribute": "type",
          "reflect": false,
          "defaultValue": "'button'"
        }
      };
    }
  }, {
    key: "events",
    get: function get() {
      return [{
        "method": "ionFocus",
        "name": "ionFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the button has focus."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "ionBlur",
        "name": "ionBlur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the button loses focus."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
    }
  }, {
    key: "elementRef",
    get: function get() {
      return "el";
    }
  }]);

  return Button;
}();

exports.Button = Button;