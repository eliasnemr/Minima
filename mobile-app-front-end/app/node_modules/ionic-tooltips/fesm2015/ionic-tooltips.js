import { animate, state, style, transition, trigger } from '@angular/animations';
import { Platform } from '@ionic/angular';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, Renderer2, Injectable, ApplicationRef, ComponentFactoryResolver, Directive, HostListener, ViewContainerRef, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TooltipBox {
    /**
     * @param {?} elementRef
     * @param {?} rnd
     */
    constructor(elementRef, rnd) {
        this.elementRef = elementRef;
        this.rnd = rnd;
        this.fadeState = 'invisible';
        this.init = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            this.initResolve = resolve;
        }));
    }
    /**
     * @param {?} side
     * @return {?}
     */
    set arrow(side) {
        this.rnd.setAttribute(this.getNativeElement(), 'class', 'has-arrow ' + 'arrow-' + side);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set posTop(val) {
        this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set posLeft(val) {
        this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');
    }
    /**
     * @return {?}
     */
    getNativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initResolve();
    }
}
TooltipBox.decorators = [
    { type: Component, args: [{
                selector: 'tooltip-box',
                template: `
    <div *ngIf="tooltipHtml; else txt" [innerHTML]="tooltipHtml"></div>
    <ng-template #txt>{{ text }}</ng-template>
  `,
                animations: [
                    trigger('fade', [
                        state('visible', style({ opacity: 1 })),
                        state('invisible', style({ opacity: 0 })),
                        transition('visible <=> invisible', animate('300ms linear')),
                    ]),
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
          :host {
              background-color: rgba(0, 0, 0, 0.8);
              color: white;
              display: inline-block;
              position: fixed;
              padding: 15px 25px;
              font-size: 15px;
              z-index: 3;
          }
    `,
                    `
          :host.has-arrow:before {
              content: '';
              border: 5px solid transparent;
              position: absolute;
              width: 0;
              height: 0;
          }
    `,
                    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',
                    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',
                    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',
                    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }']
            }] }
];
/** @nocollapse */
TooltipBox.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipBox.propDecorators = {
    fadeState: [{ type: HostBinding, args: ['@fade',] }],
    text: [{ type: Input }],
    tooltipHtml: [{ type: Input }],
    arrow: [{ type: Input }],
    posTop: [{ type: Input }],
    posLeft: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TooltipController {
    constructor() {
        this.allowMultiple = true;
        this.activeTooltips = [];
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    addTooltip(instance) {
        if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {
            this.hideAll();
        }
        this.activeTooltips.push(instance);
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    removeTooltip(instance) {
        this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);
    }
    /**
     * @return {?}
     */
    hideAll() {
        this.activeTooltips.forEach((/**
         * @param {?} tooltip
         * @return {?}
         */
        (tooltip) => {
            tooltip.removeTooltip();
        }));
    }
}
TooltipController.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ TooltipController.ngInjectableDef = defineInjectable({ factory: function TooltipController_Factory() { return new TooltipController(); }, token: TooltipController, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TooltipDirective {
    /**
     * @param {?} el
     * @param {?} appRef
     * @param {?} platform
     * @param {?} cfr
     * @param {?} tooltipCtrl
     * @param {?} vcr
     */
    constructor(el, appRef, platform, cfr, tooltipCtrl, vcr) {
        this.el = el;
        this.appRef = appRef;
        this.platform = platform;
        this.cfr = cfr;
        this.tooltipCtrl = tooltipCtrl;
        this.vcr = vcr;
        this.mobileEvent = 'press';
        this.desktopEvent = 'hover';
        this.duration = 3000;
        this._arrow = false;
        this._navTooltip = false;
        this._canShow = true;
        this._active = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set navTooltip(val) {
        this._navTooltip = typeof val !== 'boolean' || val !== false;
    }
    /**
     * @return {?}
     */
    get navTooltip() {
        return this._navTooltip;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set arrow(val) {
        this._arrow = typeof val !== 'boolean' || val !== false;
    }
    /**
     * @return {?}
     */
    get arrow() {
        return this._arrow;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set active(val) {
        this._active = typeof val !== 'boolean' || val !== false;
        this._active && this.canShow ? this.showTooltip() : this.removeTooltip();
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Show the tooltip immediately after initiating view if set to
        if (this._active) {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Set default event type by platform if event is not defined
        if (!this.event) {
            this.event = this.platform.is('mobile') ? this.mobileEvent : this.desktopEvent;
        }
    }
    /**
     * Set the canShow property
     * Ensure that tooltip is shown only if the tooltip string is not falsey
     * @param {?} show
     * @return {?}
     */
    set canShow(show) {
        this._canShow = show;
    }
    /**
     * @return {?}
     */
    get canShow() {
        return this._canShow &&
            ((typeof this.tooltip === 'string' && this.tooltip !== '')
                || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));
    }
    /**
     * Handles the click/press event and shows a tooltip.
     * If a tooltip already exists, it will just reset it's timer.
     * @return {?}
     */
    trigger() {
        if (!this.canShow) {
            return;
        }
        if (this.tooltipElement) {
            this._resetTimer();
        }
        else {
            this.showTooltip();
        }
    }
    /**
     * Creates a new tooltip component and adjusts it's properties to show properly.
     * @return {?}
     */
    showTooltip() {
        this._createTooltipComponent();
        /** @type {?} */
        const tooltipComponent = this.tooltipElement.instance;
        tooltipComponent.text = this.tooltip;
        tooltipComponent.tooltipHtml = this.tooltipHtml;
        tooltipComponent.init.then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const tooltipPosition = this._getTooltipPosition();
            tooltipComponent.posLeft = tooltipPosition.left;
            tooltipComponent.posTop = tooltipPosition.top;
            tooltipComponent.fadeState = 'visible';
            if (this.arrow) {
                /** @type {?} */
                let arrowPosition;
                if (this.positionV === 'top') {
                    arrowPosition = 'bottom';
                }
                else if (this.positionV === 'bottom') {
                    arrowPosition = 'top';
                }
                else if (this.positionH === 'left') {
                    arrowPosition = 'right';
                }
                else {
                    arrowPosition = 'left';
                }
                tooltipComponent.arrow = arrowPosition;
            }
            if (!this._active) {
                this.tooltipTimeout = setTimeout(this.removeTooltip.bind(this), this.duration);
            }
        }));
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.event === 'click') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onPress() {
        if (this.event === 'press') {
            this.trigger();
        }
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.event === 'hover') {
            this.active = true;
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        if (this.event === 'hover') {
            this.active = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _createTooltipComponent() {
        /** @type {?} */
        const componentFactory = this.cfr.resolveComponentFactory(TooltipBox);
        this.tooltipElement = this.vcr.createComponent(componentFactory);
        this.tooltipCtrl.addTooltip(this);
    }
    /**
     * @private
     * @return {?}
     */
    _getTooltipPosition() {
        /** @type {?} */
        const tooltipNativeElement = this.tooltipElement.instance.getNativeElement();
        /** @type {?} */
        const el = this.el.nativeElement;
        /** @type {?} */
        const rect = el.getBoundingClientRect();
        /** @type {?} */
        let positionLeft;
        /** @type {?} */
        let positionTop;
        /** @type {?} */
        let spacing = 10;
        if (this.navTooltip) {
            this.positionV = 'bottom';
            this.arrow = false;
            spacing = 20;
        }
        if (this.positionH === 'right') {
            positionLeft = rect.right + spacing;
        }
        else if (this.positionH === 'left') {
            positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;
            // -79, 19
        }
        else if (this.navTooltip) {
            positionLeft = rect.left + el.offsetWidth / 2;
        }
        else {
            positionLeft = rect.left;
        }
        if (this.positionV === 'top') {
            positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;
        }
        else if (this.positionV === 'bottom') {
            positionTop = rect.bottom + spacing;
        }
        else {
            positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;
        }
        if (+this.topOffset) {
            positionTop += +this.topOffset;
        }
        if (+this.leftOffset) {
            positionLeft += +this.leftOffset;
        }
        if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {
            positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;
        }
        else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {
            positionLeft = spacing;
        }
        if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {
            positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;
        }
        else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {
            positionTop = spacing;
        }
        return {
            left: positionLeft,
            top: positionTop,
        };
    }
    /**
     * @return {?}
     */
    removeTooltip() {
        if (!this.tooltipElement) {
            this.tooltipElement = undefined;
            this.tooltipTimeout = undefined;
            return;
        }
        this.tooltipElement.instance.fadeState = 'invisible';
        this.canShow = false;
        // wait for animation to finish then clear everything out
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.tooltipElement &&
                typeof this.tooltipElement.destroy === 'function') {
                this.tooltipElement.destroy();
            }
            this.tooltipCtrl.removeTooltip(this);
            this.tooltipElement = this.tooltipTimeout = undefined;
            this.canShow = true;
        }), 300);
    }
    /**
     * @private
     * @return {?}
     */
    _resetTimer() {
        clearTimeout(this.tooltipTimeout);
        this.tooltipTimeout = setTimeout((/**
         * @return {?}
         */
        () => {
            this.active = false;
        }), this.duration);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM
        // this removes it
        this.removeTooltip();
    }
}
TooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tooltip]',
            },] }
];
/** @nocollapse */
TooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ApplicationRef },
    { type: Platform },
    { type: ComponentFactoryResolver },
    { type: TooltipController },
    { type: ViewContainerRef }
];
TooltipDirective.propDecorators = {
    tooltipHtml: [{ type: Input }],
    tooltip: [{ type: Input }],
    positionV: [{ type: Input }],
    positionH: [{ type: Input }],
    event: [{ type: Input }],
    mobileEvent: [{ type: Input }],
    desktopEvent: [{ type: Input }],
    topOffset: [{ type: Input }],
    leftOffset: [{ type: Input }],
    hideOthers: [{ type: Input }],
    navTooltip: [{ type: Input }],
    arrow: [{ type: Input }],
    duration: [{ type: Input }],
    active: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onPress: [{ type: HostListener, args: ['press',] }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TooltipsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: TooltipsModule,
            providers: [TooltipController],
        };
    }
}
TooltipsModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [TooltipBox],
                declarations: [TooltipDirective, TooltipBox],
                imports: [CommonModule],
                exports: [TooltipDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TooltipBox, TooltipDirective, TooltipsModule, TooltipController };

//# sourceMappingURL=ionic-tooltips.js.map