(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations'), require('@ionic/angular'), require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ionic-tooltips', ['exports', '@angular/animations', '@ionic/angular', '@angular/common', '@angular/core'], factory) :
    (factory((global['ionic-tooltips'] = {}),global.ng.animations,global.angular,global.ng.common,global.ng.core));
}(this, (function (exports,animations,angular,common,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TooltipBox = /** @class */ (function () {
        function TooltipBox(elementRef, rnd) {
            var _this = this;
            this.elementRef = elementRef;
            this.rnd = rnd;
            this.fadeState = 'invisible';
            this.init = new Promise(( /**
             * @param {?} resolve
             * @return {?}
             */function (resolve) {
                _this.initResolve = resolve;
            }));
        }
        Object.defineProperty(TooltipBox.prototype, "arrow", {
            set: /**
             * @param {?} side
             * @return {?}
             */ function (side) {
                this.rnd.setAttribute(this.getNativeElement(), 'class', 'has-arrow ' + 'arrow-' + side);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TooltipBox.prototype, "posTop", {
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TooltipBox.prototype, "posLeft", {
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TooltipBox.prototype.getNativeElement = /**
         * @return {?}
         */
            function () {
                return this.elementRef.nativeElement;
            };
        /**
         * @return {?}
         */
        TooltipBox.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.initResolve();
            };
        TooltipBox.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tooltip-box',
                        template: "\n    <div *ngIf=\"tooltipHtml; else txt\" [innerHTML]=\"tooltipHtml\"></div>\n    <ng-template #txt>{{ text }}</ng-template>\n  ",
                        animations: [
                            animations.trigger('fade', [
                                animations.state('visible', animations.style({ opacity: 1 })),
                                animations.state('invisible', animations.style({ opacity: 0 })),
                                animations.transition('visible <=> invisible', animations.animate('300ms linear')),
                            ]),
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["\n          :host {\n              background-color: rgba(0, 0, 0, 0.8);\n              color: white;\n              display: inline-block;\n              position: fixed;\n              padding: 15px 25px;\n              font-size: 15px;\n              z-index: 3;\n          }\n    ",
                            "\n          :host.has-arrow:before {\n              content: '';\n              border: 5px solid transparent;\n              position: absolute;\n              width: 0;\n              height: 0;\n          }\n    ",
                            ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',
                            ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',
                            ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',
                            ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }']
                    }] }
        ];
        /** @nocollapse */
        TooltipBox.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        TooltipBox.propDecorators = {
            fadeState: [{ type: i0.HostBinding, args: ['@fade',] }],
            text: [{ type: i0.Input }],
            tooltipHtml: [{ type: i0.Input }],
            arrow: [{ type: i0.Input }],
            posTop: [{ type: i0.Input }],
            posLeft: [{ type: i0.Input }]
        };
        return TooltipBox;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TooltipController = /** @class */ (function () {
        function TooltipController() {
            this.allowMultiple = true;
            this.activeTooltips = [];
        }
        /**
         * @param {?} instance
         * @return {?}
         */
        TooltipController.prototype.addTooltip = /**
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {
                    this.hideAll();
                }
                this.activeTooltips.push(instance);
            };
        /**
         * @param {?} instance
         * @return {?}
         */
        TooltipController.prototype.removeTooltip = /**
         * @param {?} instance
         * @return {?}
         */
            function (instance) {
                this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);
            };
        /**
         * @return {?}
         */
        TooltipController.prototype.hideAll = /**
         * @return {?}
         */
            function () {
                this.activeTooltips.forEach(( /**
                 * @param {?} tooltip
                 * @return {?}
                 */function (tooltip) {
                    tooltip.removeTooltip();
                }));
            };
        TooltipController.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */ TooltipController.ngInjectableDef = i0.defineInjectable({ factory: function TooltipController_Factory() { return new TooltipController(); }, token: TooltipController, providedIn: "root" });
        return TooltipController;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TooltipDirective = /** @class */ (function () {
        function TooltipDirective(el, appRef, platform, cfr, tooltipCtrl, vcr) {
            this.el = el;
            this.appRef = appRef;
            this.platform = platform;
            this.cfr = cfr;
            this.tooltipCtrl = tooltipCtrl;
            this.vcr = vcr;
            this.mobileEvent = 'press';
            this.desktopEvent = 'hover';
            this.duration = 3000;
            this._arrow = false;
            this._navTooltip = false;
            this._canShow = true;
            this._active = false;
        }
        Object.defineProperty(TooltipDirective.prototype, "navTooltip", {
            get: /**
             * @return {?}
             */ function () {
                return this._navTooltip;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._navTooltip = typeof val !== 'boolean' || val !== false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TooltipDirective.prototype, "arrow", {
            get: /**
             * @return {?}
             */ function () {
                return this._arrow;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._arrow = typeof val !== 'boolean' || val !== false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TooltipDirective.prototype, "active", {
            get: /**
             * @return {?}
             */ function () {
                return this._active;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._active = typeof val !== 'boolean' || val !== false;
                this._active && this.canShow ? this.showTooltip() : this.removeTooltip();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TooltipDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // Show the tooltip immediately after initiating view if set to
                if (this._active) {
                    this.trigger();
                }
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // Set default event type by platform if event is not defined
                if (!this.event) {
                    this.event = this.platform.is('mobile') ? this.mobileEvent : this.desktopEvent;
                }
            };
        Object.defineProperty(TooltipDirective.prototype, "canShow", {
            /**
             * @return {boolean} TRUE if the tooltip can be shown
             */
            get: /**
             * @return {?}
             */ function () {
                return this._canShow &&
                    ((typeof this.tooltip === 'string' && this.tooltip !== '')
                        || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));
            },
            /**
             * Set the canShow property
             * Ensure that tooltip is shown only if the tooltip string is not falsey
             */
            set: /**
             * Set the canShow property
             * Ensure that tooltip is shown only if the tooltip string is not falsey
             * @param {?} show
             * @return {?}
             */ function (show) {
                this._canShow = show;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Handles the click/press event and shows a tooltip.
         * If a tooltip already exists, it will just reset it's timer.
         */
        /**
         * Handles the click/press event and shows a tooltip.
         * If a tooltip already exists, it will just reset it's timer.
         * @return {?}
         */
        TooltipDirective.prototype.trigger = /**
         * Handles the click/press event and shows a tooltip.
         * If a tooltip already exists, it will just reset it's timer.
         * @return {?}
         */
            function () {
                if (!this.canShow) {
                    return;
                }
                if (this.tooltipElement) {
                    this._resetTimer();
                }
                else {
                    this.showTooltip();
                }
            };
        /**
         * Creates a new tooltip component and adjusts it's properties to show properly.
         */
        /**
         * Creates a new tooltip component and adjusts it's properties to show properly.
         * @return {?}
         */
        TooltipDirective.prototype.showTooltip = /**
         * Creates a new tooltip component and adjusts it's properties to show properly.
         * @return {?}
         */
            function () {
                var _this = this;
                this._createTooltipComponent();
                /** @type {?} */
                var tooltipComponent = this.tooltipElement.instance;
                tooltipComponent.text = this.tooltip;
                tooltipComponent.tooltipHtml = this.tooltipHtml;
                tooltipComponent.init.then(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var tooltipPosition = _this._getTooltipPosition();
                    tooltipComponent.posLeft = tooltipPosition.left;
                    tooltipComponent.posTop = tooltipPosition.top;
                    tooltipComponent.fadeState = 'visible';
                    if (_this.arrow) {
                        /** @type {?} */
                        var arrowPosition = void 0;
                        if (_this.positionV === 'top') {
                            arrowPosition = 'bottom';
                        }
                        else if (_this.positionV === 'bottom') {
                            arrowPosition = 'top';
                        }
                        else if (_this.positionH === 'left') {
                            arrowPosition = 'right';
                        }
                        else {
                            arrowPosition = 'left';
                        }
                        tooltipComponent.arrow = arrowPosition;
                    }
                    if (!_this._active) {
                        _this.tooltipTimeout = setTimeout(_this.removeTooltip.bind(_this), _this.duration);
                    }
                }));
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.onClick = /**
         * @return {?}
         */
            function () {
                if (this.event === 'click') {
                    this.trigger();
                }
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.onPress = /**
         * @return {?}
         */
            function () {
                if (this.event === 'press') {
                    this.trigger();
                }
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.onMouseEnter = /**
         * @return {?}
         */
            function () {
                if (this.event === 'hover') {
                    this.active = true;
                }
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.onMouseLeave = /**
         * @return {?}
         */
            function () {
                if (this.event === 'hover') {
                    this.active = false;
                }
            };
        /**
         * @private
         * @return {?}
         */
        TooltipDirective.prototype._createTooltipComponent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var componentFactory = this.cfr.resolveComponentFactory(TooltipBox);
                this.tooltipElement = this.vcr.createComponent(componentFactory);
                this.tooltipCtrl.addTooltip(this);
            };
        /**
         * @private
         * @return {?}
         */
        TooltipDirective.prototype._getTooltipPosition = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tooltipNativeElement = this.tooltipElement.instance.getNativeElement();
                /** @type {?} */
                var el = this.el.nativeElement;
                /** @type {?} */
                var rect = el.getBoundingClientRect();
                /** @type {?} */
                var positionLeft;
                /** @type {?} */
                var positionTop;
                /** @type {?} */
                var spacing = 10;
                if (this.navTooltip) {
                    this.positionV = 'bottom';
                    this.arrow = false;
                    spacing = 20;
                }
                if (this.positionH === 'right') {
                    positionLeft = rect.right + spacing;
                }
                else if (this.positionH === 'left') {
                    positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;
                    // -79, 19
                }
                else if (this.navTooltip) {
                    positionLeft = rect.left + el.offsetWidth / 2;
                }
                else {
                    positionLeft = rect.left;
                }
                if (this.positionV === 'top') {
                    positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;
                }
                else if (this.positionV === 'bottom') {
                    positionTop = rect.bottom + spacing;
                }
                else {
                    positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;
                }
                if (+this.topOffset) {
                    positionTop += +this.topOffset;
                }
                if (+this.leftOffset) {
                    positionLeft += +this.leftOffset;
                }
                if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {
                    positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;
                }
                else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {
                    positionLeft = spacing;
                }
                if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {
                    positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;
                }
                else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {
                    positionTop = spacing;
                }
                return {
                    left: positionLeft,
                    top: positionTop,
                };
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.removeTooltip = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.tooltipElement) {
                    this.tooltipElement = undefined;
                    this.tooltipTimeout = undefined;
                    return;
                }
                this.tooltipElement.instance.fadeState = 'invisible';
                this.canShow = false;
                // wait for animation to finish then clear everything out
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    if (_this.tooltipElement &&
                        typeof _this.tooltipElement.destroy === 'function') {
                        _this.tooltipElement.destroy();
                    }
                    _this.tooltipCtrl.removeTooltip(_this);
                    _this.tooltipElement = _this.tooltipTimeout = undefined;
                    _this.canShow = true;
                }), 300);
            };
        /**
         * @private
         * @return {?}
         */
        TooltipDirective.prototype._resetTimer = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                clearTimeout(this.tooltipTimeout);
                this.tooltipTimeout = setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.active = false;
                }), this.duration);
            };
        /**
         * @return {?}
         */
        TooltipDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM
                // this removes it
                this.removeTooltip();
            };
        TooltipDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[tooltip]',
                    },] }
        ];
        /** @nocollapse */
        TooltipDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.ApplicationRef },
                { type: angular.Platform },
                { type: i0.ComponentFactoryResolver },
                { type: TooltipController },
                { type: i0.ViewContainerRef }
            ];
        };
        TooltipDirective.propDecorators = {
            tooltipHtml: [{ type: i0.Input }],
            tooltip: [{ type: i0.Input }],
            positionV: [{ type: i0.Input }],
            positionH: [{ type: i0.Input }],
            event: [{ type: i0.Input }],
            mobileEvent: [{ type: i0.Input }],
            desktopEvent: [{ type: i0.Input }],
            topOffset: [{ type: i0.Input }],
            leftOffset: [{ type: i0.Input }],
            hideOthers: [{ type: i0.Input }],
            navTooltip: [{ type: i0.Input }],
            arrow: [{ type: i0.Input }],
            duration: [{ type: i0.Input }],
            active: [{ type: i0.Input }],
            onClick: [{ type: i0.HostListener, args: ['click',] }],
            onPress: [{ type: i0.HostListener, args: ['press',] }],
            onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter',] }],
            onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }]
        };
        return TooltipDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TooltipsModule = /** @class */ (function () {
        function TooltipsModule() {
        }
        /**
         * @return {?}
         */
        TooltipsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: TooltipsModule,
                    providers: [TooltipController],
                };
            };
        TooltipsModule.decorators = [
            { type: i0.NgModule, args: [{
                        entryComponents: [TooltipBox],
                        declarations: [TooltipDirective, TooltipBox],
                        imports: [common.CommonModule],
                        exports: [TooltipDirective],
                    },] }
        ];
        return TooltipsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TooltipBox = TooltipBox;
    exports.TooltipDirective = TooltipDirective;
    exports.TooltipsModule = TooltipsModule;
    exports.TooltipController = TooltipController;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ionic-tooltips.umd.js.map