{"version":3,"sources":["ng://ionic-tooltips/lib/tooltip-box.component.ts","ng://ionic-tooltips/lib/tooltip.cotroller.ts","ng://ionic-tooltips/lib/tooltip.directive.ts","ng://ionic-tooltips/lib/tooltips.module.ts"],"names":["TooltipBox","elementRef","rnd","_this","this","fadeState","init","Promise","resolve","initResolve","Object","defineProperty","prototype","side","setAttribute","getNativeElement","val","setStyle","nativeElement","ngAfterViewInit","Component","args","selector","template","animations","trigger","state","style","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","HostBinding","Input","TooltipController","allowMultiple","activeTooltips","addTooltip","instance","hideOthers","length","hideAll","push","removeTooltip","splice","indexOf","forEach","tooltip","Injectable","providedIn","TooltipDirective","el","appRef","platform","cfr","tooltipCtrl","vcr","mobileEvent","desktopEvent","duration","_arrow","_navTooltip","_canShow","_active","canShow","showTooltip","ngOnInit","event","is","tooltipHtml","show","tooltipElement","_resetTimer","_createTooltipComponent","tooltipComponent","text","then","tooltipPosition","_getTooltipPosition","posLeft","left","posTop","top","arrow","arrowPosition","positionV","positionH","tooltipTimeout","setTimeout","bind","onClick","onPress","onMouseEnter","active","onMouseLeave","componentFactory","resolveComponentFactory","createComponent","positionLeft","positionTop","tooltipNativeElement","rect","getBoundingClientRect","spacing","navTooltip","right","offsetWidth","offsetHeight","bottom","topOffset","leftOffset","width","height","undefined","destroy","clearTimeout","ngOnDestroy","Directive","ApplicationRef","Platform","ComponentFactoryResolver","ViewContainerRef","HostListener","TooltipsModule","forRoot","ngModule","providers","NgModule","entryComponents","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\n\n@Component({\n  selector: 'tooltip-box',\n  template: `\n    <div *ngIf=\"tooltipHtml; else txt\" [innerHTML]=\"tooltipHtml\"></div>\n    <ng-template #txt>{{ text }}</ng-template>\n  `,\n  animations: [\n    trigger('fade', [\n      state('visible', style({ opacity: 1 })),\n      state('invisible', style({ opacity: 0 })),\n      transition('visible <=> invisible', animate('300ms linear')),\n    ]),\n  ],\n  styles: [\n      `\n          :host {\n              background-color: rgba(0, 0, 0, 0.8);\n              color: white;\n              display: inline-block;\n              position: fixed;\n              padding: 15px 25px;\n              font-size: 15px;\n              z-index: 3;\n          }\n    `,\n      `\n          :host.has-arrow:before {\n              content: '';\n              border: 5px solid transparent;\n              position: absolute;\n              width: 0;\n              height: 0;\n          }\n    `,\n    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',\n    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',\n    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',\n    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }',\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TooltipBox implements AfterViewInit {\n  @HostBinding('@fade') fadeState = 'invisible';\n\n  @Input() text: string;\n  @Input() tooltipHtml: string;\n\n  @Input()\n  set arrow(side: string) {\n    this.rnd.setAttribute(\n      this.getNativeElement(),\n      'class',\n      'has-arrow ' + 'arrow-' + side,\n    );\n  }\n\n  @Input()\n  set posTop(val: number) {\n    this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');\n  }\n\n  @Input()\n  set posLeft(val: number) {\n    this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');\n  }\n\n  init: Promise<void>;\n\n  private initResolve: Function;\n\n  constructor(public elementRef: ElementRef, private rnd: Renderer2) {\n    this.init = new Promise<void>(resolve => {\n      this.initResolve = resolve;\n    });\n  }\n\n  getNativeElement(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  ngAfterViewInit() {\n    this.initResolve();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TooltipDirective } from './tooltip.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TooltipController {\n  allowMultiple = true;\n  activeTooltips: TooltipDirective[] = [];\n\n  addTooltip(instance: TooltipDirective) {\n    if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {\n      this.hideAll();\n    }\n    this.activeTooltips.push(instance);\n  }\n\n  removeTooltip(instance: TooltipDirective) {\n    this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);\n  }\n\n  hideAll() {\n    this.activeTooltips.forEach((tooltip: TooltipDirective) => {\n      tooltip.removeTooltip();\n    });\n  }\n}\n","import {\n  AfterViewInit,\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Platform } from '@ionic/angular';\n\nimport { TooltipBox } from './tooltip-box.component';\nimport { TooltipController } from './tooltip.cotroller';\n\n@Directive({\n  selector: '[tooltip]',\n})\nexport class TooltipDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  @Input() tooltipHtml: string;\n\n  @Input() tooltip: string;\n\n  @Input() positionV: string;\n\n  @Input() positionH: string;\n\n  @Input() event: 'press' | 'click' | 'hover';\n\n  @Input() mobileEvent: 'press' | 'click' = 'press';\n\n  @Input() desktopEvent: 'press' | 'click' | 'hover' = 'hover';\n\n  @Input() topOffset: number;\n\n  @Input() leftOffset: number;\n\n  @Input() hideOthers: boolean;\n\n  @Input()\n  set navTooltip(val: boolean) {\n    this._navTooltip = typeof val !== 'boolean' || val !== false;\n  }\n\n  get navTooltip(): boolean {\n    return this._navTooltip;\n  }\n\n  @Input()\n  set arrow(val: boolean) {\n    this._arrow = typeof val !== 'boolean' || val !== false;\n  }\n\n  get arrow(): boolean {\n    return this._arrow;\n  }\n\n  @Input() duration = 3000;\n\n  @Input()\n  set active(val: boolean) {\n    this._active = typeof val !== 'boolean' || val !== false;\n    this._active && this.canShow ? this.showTooltip() : this.removeTooltip();\n  }\n\n  get active(): boolean {\n    return this._active;\n  }\n\n  private _arrow = false;\n  private _navTooltip = false;\n  private tooltipElement: ComponentRef<TooltipBox>;\n  private tooltipTimeout: any;\n  private _canShow = true;\n  private _active = false;\n\n  constructor(\n    private el: ElementRef,\n    private appRef: ApplicationRef,\n    private platform: Platform,\n    private cfr: ComponentFactoryResolver,\n    private tooltipCtrl: TooltipController,\n    private vcr: ViewContainerRef,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    // Show the tooltip immediately after initiating view if set to\n    if (this._active) {\n      this.trigger();\n    }\n  }\n\n  ngOnInit() {\n    // Set default event type by platform if event is not defined\n    if (!this.event) {\n      this.event = this.platform.is('mobile') ? this.mobileEvent : this.desktopEvent;\n    }\n  }\n\n  /**\n   * Set the canShow property\n   * Ensure that tooltip is shown only if the tooltip string is not falsey\n   */\n  set canShow(show: boolean) {\n    this._canShow = show;\n  }\n\n  /**\n   * @return {boolean} TRUE if the tooltip can be shown\n   */\n  get canShow(): boolean {\n    return this._canShow &&\n      ((typeof this.tooltip === 'string' && this.tooltip !== '')\n        || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));\n  }\n\n  /**\n   * Handles the click/press event and shows a tooltip.\n   * If a tooltip already exists, it will just reset it's timer.\n   */\n  trigger() {\n    if (!this.canShow) {\n      return;\n    }\n\n    if (this.tooltipElement) {\n      this._resetTimer();\n    } else {\n      this.showTooltip();\n    }\n  }\n\n  /**\n   * Creates a new tooltip component and adjusts it's properties to show properly.\n   */\n  showTooltip() {\n    this._createTooltipComponent();\n\n    const tooltipComponent: TooltipBox = this.tooltipElement.instance;\n\n    tooltipComponent.text = this.tooltip;\n    tooltipComponent.tooltipHtml = this.tooltipHtml;\n    tooltipComponent.init.then(() => {\n      const tooltipPosition = this._getTooltipPosition();\n\n      tooltipComponent.posLeft = tooltipPosition.left;\n      tooltipComponent.posTop = tooltipPosition.top;\n\n      tooltipComponent.fadeState = 'visible';\n\n      if (this.arrow) {\n        let arrowPosition;\n        if (this.positionV === 'top') {\n          arrowPosition = 'bottom';\n        } else if (this.positionV === 'bottom') {\n          arrowPosition = 'top';\n        } else if (this.positionH === 'left') {\n          arrowPosition = 'right';\n        } else {\n          arrowPosition = 'left';\n        }\n        tooltipComponent.arrow = arrowPosition;\n      }\n\n      if (!this._active) {\n        this.tooltipTimeout = setTimeout(\n          this.removeTooltip.bind(this),\n          this.duration,\n        );\n      }\n    });\n  }\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.event === 'click') {\n      this.trigger();\n    }\n  }\n\n  @HostListener('press')\n  onPress(): void {\n    if (this.event === 'press') {\n      this.trigger();\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.event === 'hover') {\n      this.active = true;\n    }\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    if (this.event === 'hover') {\n      this.active = false;\n    }\n  }\n\n  private _createTooltipComponent() {\n    const componentFactory = this.cfr.resolveComponentFactory(TooltipBox);\n    this.tooltipElement = this.vcr.createComponent(componentFactory);\n    this.tooltipCtrl.addTooltip(this);\n  }\n\n  private _getTooltipPosition() {\n    const tooltipNativeElement: HTMLElement = this.tooltipElement.instance.getNativeElement(),\n      el: HTMLElement = this.el.nativeElement,\n      rect: ClientRect = el.getBoundingClientRect();\n\n    let positionLeft: number,\n      positionTop: number,\n      spacing = 10;\n\n    if (this.navTooltip) {\n      this.positionV = 'bottom';\n      this.arrow = false;\n      spacing = 20;\n    }\n\n    if (this.positionH === 'right') {\n      positionLeft = rect.right + spacing;\n    } else if (this.positionH === 'left') {\n      positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;\n      // -79, 19\n    } else if (this.navTooltip) {\n      positionLeft = rect.left + el.offsetWidth / 2;\n    } else {\n      positionLeft = rect.left;\n    }\n\n\n    if (this.positionV === 'top') {\n      positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;\n    } else if (this.positionV === 'bottom') {\n      positionTop = rect.bottom + spacing;\n    } else {\n      positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;\n    }\n\n    if (+this.topOffset) {\n      positionTop += +this.topOffset;\n    }\n    if (+this.leftOffset) {\n      positionLeft += +this.leftOffset;\n    }\n\n    if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {\n      positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;\n    } else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {\n      positionLeft = spacing;\n    }\n\n    if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {\n      positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;\n    } else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {\n      positionTop = spacing;\n    }\n\n    return {\n      left: positionLeft,\n      top: positionTop,\n    };\n  }\n\n  removeTooltip() {\n    if (!this.tooltipElement) {\n      this.tooltipElement = undefined;\n      this.tooltipTimeout = undefined;\n      return;\n    }\n\n    this.tooltipElement.instance.fadeState = 'invisible';\n\n    this.canShow = false;\n\n    // wait for animation to finish then clear everything out\n    setTimeout(() => {\n      if (\n        this.tooltipElement &&\n        typeof this.tooltipElement.destroy === 'function'\n      ) {\n        this.tooltipElement.destroy();\n      }\n      this.tooltipCtrl.removeTooltip(this);\n      this.tooltipElement = this.tooltipTimeout = undefined;\n      this.canShow = true;\n    }, 300);\n  }\n\n  private _resetTimer() {\n    clearTimeout(this.tooltipTimeout);\n    this.tooltipTimeout = setTimeout(() => {\n      this.active = false;\n    }, this.duration);\n  }\n\n  ngOnDestroy() {\n    // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM\n    // this removes it\n    this.removeTooltip();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { TooltipBox } from './tooltip-box.component';\nimport { TooltipController } from './tooltip.cotroller';\nimport { TooltipDirective } from './tooltip.directive';\n\n@NgModule({\n  entryComponents: [TooltipBox],\n  declarations: [TooltipDirective, TooltipBox],\n  imports: [CommonModule],\n  exports: [TooltipDirective],\n})\nexport class TooltipsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TooltipsModule,\n      providers: [TooltipController],\n    };\n  }\n}\n"]}