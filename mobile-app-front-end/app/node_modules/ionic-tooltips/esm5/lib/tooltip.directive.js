/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, HostListener, Input, ViewContainerRef, } from '@angular/core';
import { Platform } from '@ionic/angular';
import { TooltipBox } from './tooltip-box.component';
import { TooltipController } from './tooltip.cotroller';
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(el, appRef, platform, cfr, tooltipCtrl, vcr) {
        this.el = el;
        this.appRef = appRef;
        this.platform = platform;
        this.cfr = cfr;
        this.tooltipCtrl = tooltipCtrl;
        this.vcr = vcr;
        this.mobileEvent = 'press';
        this.desktopEvent = 'hover';
        this.duration = 3000;
        this._arrow = false;
        this._navTooltip = false;
        this._canShow = true;
        this._active = false;
    }
    Object.defineProperty(TooltipDirective.prototype, "navTooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this._navTooltip;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._navTooltip = typeof val !== 'boolean' || val !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "arrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._arrow;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._arrow = typeof val !== 'boolean' || val !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._active = typeof val !== 'boolean' || val !== false;
            this._active && this.canShow ? this.showTooltip() : this.removeTooltip();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // Show the tooltip immediately after initiating view if set to
        if (this._active) {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Set default event type by platform if event is not defined
        if (!this.event) {
            this.event = this.platform.is('mobile') ? this.mobileEvent : this.desktopEvent;
        }
    };
    Object.defineProperty(TooltipDirective.prototype, "canShow", {
        /**
         * @return {boolean} TRUE if the tooltip can be shown
         */
        get: /**
         * @return {?}
         */
        function () {
            return this._canShow &&
                ((typeof this.tooltip === 'string' && this.tooltip !== '')
                    || (typeof this.tooltipHtml === 'string' && this.tooltipHtml !== ''));
        },
        /**
         * Set the canShow property
         * Ensure that tooltip is shown only if the tooltip string is not falsey
         */
        set: /**
         * Set the canShow property
         * Ensure that tooltip is shown only if the tooltip string is not falsey
         * @param {?} show
         * @return {?}
         */
        function (show) {
            this._canShow = show;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles the click/press event and shows a tooltip.
     * If a tooltip already exists, it will just reset it's timer.
     */
    /**
     * Handles the click/press event and shows a tooltip.
     * If a tooltip already exists, it will just reset it's timer.
     * @return {?}
     */
    TooltipDirective.prototype.trigger = /**
     * Handles the click/press event and shows a tooltip.
     * If a tooltip already exists, it will just reset it's timer.
     * @return {?}
     */
    function () {
        if (!this.canShow) {
            return;
        }
        if (this.tooltipElement) {
            this._resetTimer();
        }
        else {
            this.showTooltip();
        }
    };
    /**
     * Creates a new tooltip component and adjusts it's properties to show properly.
     */
    /**
     * Creates a new tooltip component and adjusts it's properties to show properly.
     * @return {?}
     */
    TooltipDirective.prototype.showTooltip = /**
     * Creates a new tooltip component and adjusts it's properties to show properly.
     * @return {?}
     */
    function () {
        var _this = this;
        this._createTooltipComponent();
        /** @type {?} */
        var tooltipComponent = this.tooltipElement.instance;
        tooltipComponent.text = this.tooltip;
        tooltipComponent.tooltipHtml = this.tooltipHtml;
        tooltipComponent.init.then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var tooltipPosition = _this._getTooltipPosition();
            tooltipComponent.posLeft = tooltipPosition.left;
            tooltipComponent.posTop = tooltipPosition.top;
            tooltipComponent.fadeState = 'visible';
            if (_this.arrow) {
                /** @type {?} */
                var arrowPosition = void 0;
                if (_this.positionV === 'top') {
                    arrowPosition = 'bottom';
                }
                else if (_this.positionV === 'bottom') {
                    arrowPosition = 'top';
                }
                else if (_this.positionH === 'left') {
                    arrowPosition = 'right';
                }
                else {
                    arrowPosition = 'left';
                }
                tooltipComponent.arrow = arrowPosition;
            }
            if (!_this._active) {
                _this.tooltipTimeout = setTimeout(_this.removeTooltip.bind(_this), _this.duration);
            }
        }));
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.event === 'click') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onPress = /**
     * @return {?}
     */
    function () {
        if (this.event === 'press') {
            this.trigger();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.event === 'hover') {
            this.active = true;
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        if (this.event === 'hover') {
            this.active = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype._createTooltipComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentFactory = this.cfr.resolveComponentFactory(TooltipBox);
        this.tooltipElement = this.vcr.createComponent(componentFactory);
        this.tooltipCtrl.addTooltip(this);
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype._getTooltipPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tooltipNativeElement = this.tooltipElement.instance.getNativeElement();
        /** @type {?} */
        var el = this.el.nativeElement;
        /** @type {?} */
        var rect = el.getBoundingClientRect();
        /** @type {?} */
        var positionLeft;
        /** @type {?} */
        var positionTop;
        /** @type {?} */
        var spacing = 10;
        if (this.navTooltip) {
            this.positionV = 'bottom';
            this.arrow = false;
            spacing = 20;
        }
        if (this.positionH === 'right') {
            positionLeft = rect.right + spacing;
        }
        else if (this.positionH === 'left') {
            positionLeft = rect.left - spacing - tooltipNativeElement.offsetWidth;
            // -79, 19
        }
        else if (this.navTooltip) {
            positionLeft = rect.left + el.offsetWidth / 2;
        }
        else {
            positionLeft = rect.left;
        }
        if (this.positionV === 'top') {
            positionTop = rect.top - spacing - tooltipNativeElement.offsetHeight;
        }
        else if (this.positionV === 'bottom') {
            positionTop = rect.bottom + spacing;
        }
        else {
            positionTop = rect.top + el.offsetHeight / 2 - tooltipNativeElement.offsetHeight / 2;
        }
        if (+this.topOffset) {
            positionTop += +this.topOffset;
        }
        if (+this.leftOffset) {
            positionLeft += +this.leftOffset;
        }
        if (positionLeft + tooltipNativeElement.offsetWidth + spacing > this.platform.width()) {
            positionLeft = this.platform.width() - tooltipNativeElement.offsetWidth - spacing;
        }
        else if (positionLeft + tooltipNativeElement.offsetWidth - spacing < 0) {
            positionLeft = spacing;
        }
        if (positionTop + tooltipNativeElement.offsetHeight + spacing > this.platform.height()) {
            positionTop = this.platform.height() - tooltipNativeElement.offsetHeight - spacing;
        }
        else if (positionTop + tooltipNativeElement.offsetHeight - spacing < 0) {
            positionTop = spacing;
        }
        return {
            left: positionLeft,
            top: positionTop,
        };
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.removeTooltip = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tooltipElement) {
            this.tooltipElement = undefined;
            this.tooltipTimeout = undefined;
            return;
        }
        this.tooltipElement.instance.fadeState = 'invisible';
        this.canShow = false;
        // wait for animation to finish then clear everything out
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.tooltipElement &&
                typeof _this.tooltipElement.destroy === 'function') {
                _this.tooltipElement.destroy();
            }
            _this.tooltipCtrl.removeTooltip(_this);
            _this.tooltipElement = _this.tooltipTimeout = undefined;
            _this.canShow = true;
        }), 300);
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype._resetTimer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.tooltipTimeout);
        this.tooltipTimeout = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.active = false;
        }), this.duration);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if the timer hasn't expired or active is true when the component gets destroyed, the tooltip will remain in the DOM
        // this removes it
        this.removeTooltip();
    };
    TooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tooltip]',
                },] }
    ];
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ApplicationRef },
        { type: Platform },
        { type: ComponentFactoryResolver },
        { type: TooltipController },
        { type: ViewContainerRef }
    ]; };
    TooltipDirective.propDecorators = {
        tooltipHtml: [{ type: Input }],
        tooltip: [{ type: Input }],
        positionV: [{ type: Input }],
        positionH: [{ type: Input }],
        event: [{ type: Input }],
        mobileEvent: [{ type: Input }],
        desktopEvent: [{ type: Input }],
        topOffset: [{ type: Input }],
        leftOffset: [{ type: Input }],
        hideOthers: [{ type: Input }],
        navTooltip: [{ type: Input }],
        arrow: [{ type: Input }],
        duration: [{ type: Input }],
        active: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onPress: [{ type: HostListener, args: ['press',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return TooltipDirective;
}());
export { TooltipDirective };
if (false) {
    /** @type {?} */
    TooltipDirective.prototype.tooltipHtml;
    /** @type {?} */
    TooltipDirective.prototype.tooltip;
    /** @type {?} */
    TooltipDirective.prototype.positionV;
    /** @type {?} */
    TooltipDirective.prototype.positionH;
    /** @type {?} */
    TooltipDirective.prototype.event;
    /** @type {?} */
    TooltipDirective.prototype.mobileEvent;
    /** @type {?} */
    TooltipDirective.prototype.desktopEvent;
    /** @type {?} */
    TooltipDirective.prototype.topOffset;
    /** @type {?} */
    TooltipDirective.prototype.leftOffset;
    /** @type {?} */
    TooltipDirective.prototype.hideOthers;
    /** @type {?} */
    TooltipDirective.prototype.duration;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype._arrow;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype._navTooltip;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.tooltipElement;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.tooltipTimeout;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype._canShow;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype._active;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.tooltipCtrl;
    /**
     * @type {?}
     * @private
     */
    TooltipDirective.prototype.vcr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYy10b29sdGlwcy8iLCJzb3VyY2VzIjpbImxpYi90b29sdGlwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLGNBQWMsRUFDZCx3QkFBd0IsRUFFeEIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUdMLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhEO0lBOERFLDBCQUNVLEVBQWMsRUFDZCxNQUFzQixFQUN0QixRQUFrQixFQUNsQixHQUE2QixFQUM3QixXQUE4QixFQUM5QixHQUFxQjtRQUxyQixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFDOUIsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFyRHRCLGdCQUFXLEdBQXNCLE9BQU8sQ0FBQztRQUV6QyxpQkFBWSxHQUFnQyxPQUFPLENBQUM7UUEwQnBELGFBQVEsR0FBRyxJQUFJLENBQUM7UUFZakIsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNmLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBR3BCLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDaEIsWUFBTyxHQUFHLEtBQUssQ0FBQztJQVV4QixDQUFDO0lBN0NELHNCQUNJLHdDQUFVOzs7O1FBSWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7Ozs7UUFQRCxV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Ozs7O0lBWXpCLGtDQUF1Qjs7Ozs7SUFDdkIsdUNBQTRCOzs7OztJQUM1QiwwQ0FBaUQ7Ozs7O0lBQ2pELDBDQUE0Qjs7Ozs7SUFDNUIsb0NBQXdCOzs7OztJQUN4QixtQ0FBd0I7Ozs7O0lBR3RCLDhCQUFzQjs7Ozs7SUFDdEIsa0NBQThCOzs7OztJQUM5QixvQ0FBMEI7Ozs7O0lBQzFCLCtCQUFxQzs7Ozs7SUFDckMsdUNBQXNDOzs7OztJQUN0QywrQkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5cbmltcG9ydCB7IFRvb2x0aXBCb3ggfSBmcm9tICcuL3Rvb2x0aXAtYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUb29sdGlwQ29udHJvbGxlciB9IGZyb20gJy4vdG9vbHRpcC5jb3Ryb2xsZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdG9vbHRpcF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUb29sdGlwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHRvb2x0aXBIdG1sOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgdG9vbHRpcDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHBvc2l0aW9uVjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHBvc2l0aW9uSDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGV2ZW50OiAncHJlc3MnIHwgJ2NsaWNrJyB8ICdob3Zlcic7XG5cbiAgQElucHV0KCkgbW9iaWxlRXZlbnQ6ICdwcmVzcycgfCAnY2xpY2snID0gJ3ByZXNzJztcblxuICBASW5wdXQoKSBkZXNrdG9wRXZlbnQ6ICdwcmVzcycgfCAnY2xpY2snIHwgJ2hvdmVyJyA9ICdob3Zlcic7XG5cbiAgQElucHV0KCkgdG9wT2Zmc2V0OiBudW1iZXI7XG5cbiAgQElucHV0KCkgbGVmdE9mZnNldDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpIGhpZGVPdGhlcnM6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgc2V0IG5hdlRvb2x0aXAodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbmF2VG9vbHRpcCA9IHR5cGVvZiB2YWwgIT09ICdib29sZWFuJyB8fCB2YWwgIT09IGZhbHNlO1xuICB9XG5cbiAgZ2V0IG5hdlRvb2x0aXAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX25hdlRvb2x0aXA7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgYXJyb3codmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYXJyb3cgPSB0eXBlb2YgdmFsICE9PSAnYm9vbGVhbicgfHwgdmFsICE9PSBmYWxzZTtcbiAgfVxuXG4gIGdldCBhcnJvdygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyb3c7XG4gIH1cblxuICBASW5wdXQoKSBkdXJhdGlvbiA9IDMwMDA7XG5cbiAgQElucHV0KClcbiAgc2V0IGFjdGl2ZSh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB0eXBlb2YgdmFsICE9PSAnYm9vbGVhbicgfHwgdmFsICE9PSBmYWxzZTtcbiAgICB0aGlzLl9hY3RpdmUgJiYgdGhpcy5jYW5TaG93ID8gdGhpcy5zaG93VG9vbHRpcCgpIDogdGhpcy5yZW1vdmVUb29sdGlwKCk7XG4gIH1cblxuICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICBwcml2YXRlIF9hcnJvdyA9IGZhbHNlO1xuICBwcml2YXRlIF9uYXZUb29sdGlwID0gZmFsc2U7XG4gIHByaXZhdGUgdG9vbHRpcEVsZW1lbnQ6IENvbXBvbmVudFJlZjxUb29sdGlwQm94PjtcbiAgcHJpdmF0ZSB0b29sdGlwVGltZW91dDogYW55O1xuICBwcml2YXRlIF9jYW5TaG93ID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfYWN0aXZlID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm0sXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIHRvb2x0aXBDdHJsOiBUb29sdGlwQ29udHJvbGxlcixcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgLy8gU2hvdyB0aGUgdG9vbHRpcCBpbW1lZGlhdGVseSBhZnRlciBpbml0aWF0aW5nIHZpZXcgaWYgc2V0IHRvXG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gU2V0IGRlZmF1bHQgZXZlbnQgdHlwZSBieSBwbGF0Zm9ybSBpZiBldmVudCBpcyBub3QgZGVmaW5lZFxuICAgIGlmICghdGhpcy5ldmVudCkge1xuICAgICAgdGhpcy5ldmVudCA9IHRoaXMucGxhdGZvcm0uaXMoJ21vYmlsZScpID8gdGhpcy5tb2JpbGVFdmVudCA6IHRoaXMuZGVza3RvcEV2ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGNhblNob3cgcHJvcGVydHlcbiAgICogRW5zdXJlIHRoYXQgdG9vbHRpcCBpcyBzaG93biBvbmx5IGlmIHRoZSB0b29sdGlwIHN0cmluZyBpcyBub3QgZmFsc2V5XG4gICAqL1xuICBzZXQgY2FuU2hvdyhzaG93OiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2FuU2hvdyA9IHNob3c7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVFJVRSBpZiB0aGUgdG9vbHRpcCBjYW4gYmUgc2hvd25cbiAgICovXG4gIGdldCBjYW5TaG93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jYW5TaG93ICYmXG4gICAgICAoKHR5cGVvZiB0aGlzLnRvb2x0aXAgPT09ICdzdHJpbmcnICYmIHRoaXMudG9vbHRpcCAhPT0gJycpXG4gICAgICAgIHx8ICh0eXBlb2YgdGhpcy50b29sdGlwSHRtbCA9PT0gJ3N0cmluZycgJiYgdGhpcy50b29sdGlwSHRtbCAhPT0gJycpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBjbGljay9wcmVzcyBldmVudCBhbmQgc2hvd3MgYSB0b29sdGlwLlxuICAgKiBJZiBhIHRvb2x0aXAgYWxyZWFkeSBleGlzdHMsIGl0IHdpbGwganVzdCByZXNldCBpdCdzIHRpbWVyLlxuICAgKi9cbiAgdHJpZ2dlcigpIHtcbiAgICBpZiAoIXRoaXMuY2FuU2hvdykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRvb2x0aXBFbGVtZW50KSB7XG4gICAgICB0aGlzLl9yZXNldFRpbWVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB0b29sdGlwIGNvbXBvbmVudCBhbmQgYWRqdXN0cyBpdCdzIHByb3BlcnRpZXMgdG8gc2hvdyBwcm9wZXJseS5cbiAgICovXG4gIHNob3dUb29sdGlwKCkge1xuICAgIHRoaXMuX2NyZWF0ZVRvb2x0aXBDb21wb25lbnQoKTtcblxuICAgIGNvbnN0IHRvb2x0aXBDb21wb25lbnQ6IFRvb2x0aXBCb3ggPSB0aGlzLnRvb2x0aXBFbGVtZW50Lmluc3RhbmNlO1xuXG4gICAgdG9vbHRpcENvbXBvbmVudC50ZXh0ID0gdGhpcy50b29sdGlwO1xuICAgIHRvb2x0aXBDb21wb25lbnQudG9vbHRpcEh0bWwgPSB0aGlzLnRvb2x0aXBIdG1sO1xuICAgIHRvb2x0aXBDb21wb25lbnQuaW5pdC50aGVuKCgpID0+IHtcbiAgICAgIGNvbnN0IHRvb2x0aXBQb3NpdGlvbiA9IHRoaXMuX2dldFRvb2x0aXBQb3NpdGlvbigpO1xuXG4gICAgICB0b29sdGlwQ29tcG9uZW50LnBvc0xlZnQgPSB0b29sdGlwUG9zaXRpb24ubGVmdDtcbiAgICAgIHRvb2x0aXBDb21wb25lbnQucG9zVG9wID0gdG9vbHRpcFBvc2l0aW9uLnRvcDtcblxuICAgICAgdG9vbHRpcENvbXBvbmVudC5mYWRlU3RhdGUgPSAndmlzaWJsZSc7XG5cbiAgICAgIGlmICh0aGlzLmFycm93KSB7XG4gICAgICAgIGxldCBhcnJvd1Bvc2l0aW9uO1xuICAgICAgICBpZiAodGhpcy5wb3NpdGlvblYgPT09ICd0b3AnKSB7XG4gICAgICAgICAgYXJyb3dQb3NpdGlvbiA9ICdib3R0b20nO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucG9zaXRpb25WID09PSAnYm90dG9tJykge1xuICAgICAgICAgIGFycm93UG9zaXRpb24gPSAndG9wJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uSCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgYXJyb3dQb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyb3dQb3NpdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwQ29tcG9uZW50LmFycm93ID0gYXJyb3dQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgdGhpcy50b29sdGlwVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgdGhpcy5yZW1vdmVUb29sdGlwLmJpbmQodGhpcyksXG4gICAgICAgICAgdGhpcy5kdXJhdGlvbixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ldmVudCA9PT0gJ2NsaWNrJykge1xuICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigncHJlc3MnKVxuICBvblByZXNzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmV2ZW50ID09PSAncHJlc3MnKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgb25Nb3VzZUVudGVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmV2ZW50ID09PSAnaG92ZXInKSB7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gIG9uTW91c2VMZWF2ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ldmVudCA9PT0gJ2hvdmVyJykge1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jcmVhdGVUb29sdGlwQ29tcG9uZW50KCkge1xuICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShUb29sdGlwQm94KTtcbiAgICB0aGlzLnRvb2x0aXBFbGVtZW50ID0gdGhpcy52Y3IuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuICAgIHRoaXMudG9vbHRpcEN0cmwuYWRkVG9vbHRpcCh0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgX2dldFRvb2x0aXBQb3NpdGlvbigpIHtcbiAgICBjb25zdCB0b29sdGlwTmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLnRvb2x0aXBFbGVtZW50Lmluc3RhbmNlLmdldE5hdGl2ZUVsZW1lbnQoKSxcbiAgICAgIGVsOiBIVE1MRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgIHJlY3Q6IENsaWVudFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGxldCBwb3NpdGlvbkxlZnQ6IG51bWJlcixcbiAgICAgIHBvc2l0aW9uVG9wOiBudW1iZXIsXG4gICAgICBzcGFjaW5nID0gMTA7XG5cbiAgICBpZiAodGhpcy5uYXZUb29sdGlwKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uViA9ICdib3R0b20nO1xuICAgICAgdGhpcy5hcnJvdyA9IGZhbHNlO1xuICAgICAgc3BhY2luZyA9IDIwO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBvc2l0aW9uSCA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gcmVjdC5yaWdodCArIHNwYWNpbmc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uSCA9PT0gJ2xlZnQnKSB7XG4gICAgICBwb3NpdGlvbkxlZnQgPSByZWN0LmxlZnQgLSBzcGFjaW5nIC0gdG9vbHRpcE5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAvLyAtNzksIDE5XG4gICAgfSBlbHNlIGlmICh0aGlzLm5hdlRvb2x0aXApIHtcbiAgICAgIHBvc2l0aW9uTGVmdCA9IHJlY3QubGVmdCArIGVsLm9mZnNldFdpZHRoIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gcmVjdC5sZWZ0O1xuICAgIH1cblxuXG4gICAgaWYgKHRoaXMucG9zaXRpb25WID09PSAndG9wJykge1xuICAgICAgcG9zaXRpb25Ub3AgPSByZWN0LnRvcCAtIHNwYWNpbmcgLSB0b29sdGlwTmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uViA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHBvc2l0aW9uVG9wID0gcmVjdC5ib3R0b20gKyBzcGFjaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3NpdGlvblRvcCA9IHJlY3QudG9wICsgZWwub2Zmc2V0SGVpZ2h0IC8gMiAtIHRvb2x0aXBOYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgfVxuXG4gICAgaWYgKCt0aGlzLnRvcE9mZnNldCkge1xuICAgICAgcG9zaXRpb25Ub3AgKz0gK3RoaXMudG9wT2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoK3RoaXMubGVmdE9mZnNldCkge1xuICAgICAgcG9zaXRpb25MZWZ0ICs9ICt0aGlzLmxlZnRPZmZzZXQ7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uTGVmdCArIHRvb2x0aXBOYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoICsgc3BhY2luZyA+IHRoaXMucGxhdGZvcm0ud2lkdGgoKSkge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gdGhpcy5wbGF0Zm9ybS53aWR0aCgpIC0gdG9vbHRpcE5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLSBzcGFjaW5nO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb25MZWZ0ICsgdG9vbHRpcE5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLSBzcGFjaW5nIDwgMCkge1xuICAgICAgcG9zaXRpb25MZWZ0ID0gc3BhY2luZztcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb25Ub3AgKyB0b29sdGlwTmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgKyBzcGFjaW5nID4gdGhpcy5wbGF0Zm9ybS5oZWlnaHQoKSkge1xuICAgICAgcG9zaXRpb25Ub3AgPSB0aGlzLnBsYXRmb3JtLmhlaWdodCgpIC0gdG9vbHRpcE5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gc3BhY2luZztcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uVG9wICsgdG9vbHRpcE5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gc3BhY2luZyA8IDApIHtcbiAgICAgIHBvc2l0aW9uVG9wID0gc3BhY2luZztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogcG9zaXRpb25MZWZ0LFxuICAgICAgdG9wOiBwb3NpdGlvblRvcCxcbiAgICB9O1xuICB9XG5cbiAgcmVtb3ZlVG9vbHRpcCgpIHtcbiAgICBpZiAoIXRoaXMudG9vbHRpcEVsZW1lbnQpIHtcbiAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnRvb2x0aXBUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuaW5zdGFuY2UuZmFkZVN0YXRlID0gJ2ludmlzaWJsZSc7XG5cbiAgICB0aGlzLmNhblNob3cgPSBmYWxzZTtcblxuICAgIC8vIHdhaXQgZm9yIGFuaW1hdGlvbiB0byBmaW5pc2ggdGhlbiBjbGVhciBldmVyeXRoaW5nIG91dFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50ICYmXG4gICAgICAgIHR5cGVvZiB0aGlzLnRvb2x0aXBFbGVtZW50LmRlc3Ryb3kgPT09ICdmdW5jdGlvbidcbiAgICAgICkge1xuICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudG9vbHRpcEN0cmwucmVtb3ZlVG9vbHRpcCh0aGlzKTtcbiAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQgPSB0aGlzLnRvb2x0aXBUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5jYW5TaG93ID0gdHJ1ZTtcbiAgICB9LCAzMDApO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVzZXRUaW1lcigpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50b29sdGlwVGltZW91dCk7XG4gICAgdGhpcy50b29sdGlwVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9LCB0aGlzLmR1cmF0aW9uKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIGlmIHRoZSB0aW1lciBoYXNuJ3QgZXhwaXJlZCBvciBhY3RpdmUgaXMgdHJ1ZSB3aGVuIHRoZSBjb21wb25lbnQgZ2V0cyBkZXN0cm95ZWQsIHRoZSB0b29sdGlwIHdpbGwgcmVtYWluIGluIHRoZSBET01cbiAgICAvLyB0aGlzIHJlbW92ZXMgaXRcbiAgICB0aGlzLnJlbW92ZVRvb2x0aXAoKTtcbiAgfVxufVxuIl19