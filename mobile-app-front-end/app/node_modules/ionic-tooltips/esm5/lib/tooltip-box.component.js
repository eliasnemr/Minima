/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, Renderer2, } from '@angular/core';
var TooltipBox = /** @class */ (function () {
    function TooltipBox(elementRef, rnd) {
        var _this = this;
        this.elementRef = elementRef;
        this.rnd = rnd;
        this.fadeState = 'invisible';
        this.init = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            _this.initResolve = resolve;
        }));
    }
    Object.defineProperty(TooltipBox.prototype, "arrow", {
        set: /**
         * @param {?} side
         * @return {?}
         */
        function (side) {
            this.rnd.setAttribute(this.getNativeElement(), 'class', 'has-arrow ' + 'arrow-' + side);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipBox.prototype, "posTop", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipBox.prototype, "posLeft", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TooltipBox.prototype.getNativeElement = /**
     * @return {?}
     */
    function () {
        return this.elementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    TooltipBox.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initResolve();
    };
    TooltipBox.decorators = [
        { type: Component, args: [{
                    selector: 'tooltip-box',
                    template: "\n    <div *ngIf=\"tooltipHtml; else txt\" [innerHTML]=\"tooltipHtml\"></div>\n    <ng-template #txt>{{ text }}</ng-template>\n  ",
                    animations: [
                        trigger('fade', [
                            state('visible', style({ opacity: 1 })),
                            state('invisible', style({ opacity: 0 })),
                            transition('visible <=> invisible', animate('300ms linear')),
                        ]),
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n          :host {\n              background-color: rgba(0, 0, 0, 0.8);\n              color: white;\n              display: inline-block;\n              position: fixed;\n              padding: 15px 25px;\n              font-size: 15px;\n              z-index: 3;\n          }\n    ",
                        "\n          :host.has-arrow:before {\n              content: '';\n              border: 5px solid transparent;\n              position: absolute;\n              width: 0;\n              height: 0;\n          }\n    ",
                        ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',
                        ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',
                        ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',
                        ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }']
                }] }
    ];
    /** @nocollapse */
    TooltipBox.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TooltipBox.propDecorators = {
        fadeState: [{ type: HostBinding, args: ['@fade',] }],
        text: [{ type: Input }],
        tooltipHtml: [{ type: Input }],
        arrow: [{ type: Input }],
        posTop: [{ type: Input }],
        posLeft: [{ type: Input }]
    };
    return TooltipBox;
}());
export { TooltipBox };
if (false) {
    /** @type {?} */
    TooltipBox.prototype.fadeState;
    /** @type {?} */
    TooltipBox.prototype.text;
    /** @type {?} */
    TooltipBox.prototype.tooltipHtml;
    /** @type {?} */
    TooltipBox.prototype.init;
    /**
     * @type {?}
     * @private
     */
    TooltipBox.prototype.initResolve;
    /** @type {?} */
    TooltipBox.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    TooltipBox.prototype.rnd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1ib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaW9uaWMtdG9vbHRpcHMvIiwic291cmNlcyI6WyJsaWIvdG9vbHRpcC1ib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQXNFRSxvQkFBbUIsVUFBc0IsRUFBVSxHQUFjO1FBQWpFLGlCQUlDO1FBSmtCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFXO1FBNUIzQyxjQUFTLEdBQUcsV0FBVyxDQUFDO1FBNkI1QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksT0FBTzs7OztRQUFPLFVBQUEsT0FBTztZQUNuQyxLQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztRQUM3QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7SUEzQkQsc0JBQ0ksNkJBQUs7Ozs7O1FBRFQsVUFDVSxJQUFZO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUNuQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFDdkIsT0FBTyxFQUNQLFlBQVksR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUMvQixDQUFDO1FBQ0osQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSw4QkFBTTs7Ozs7UUFEVixVQUNXLEdBQVc7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNoRSxDQUFDOzs7T0FBQTtJQUVELHNCQUNJLCtCQUFPOzs7OztRQURYLFVBQ1ksR0FBVztZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pFLENBQUM7OztPQUFBOzs7O0lBWUQscUNBQWdCOzs7SUFBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxvQ0FBZTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Z0JBbEZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLG1JQUdUO29CQUNELFVBQVUsRUFBRTt3QkFDVixPQUFPLENBQUMsTUFBTSxFQUFFOzRCQUNkLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3ZDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3pDLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7eUJBQzdELENBQUM7cUJBQ0g7b0JBMkJELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzZCQXpCM0MsOFJBVUQ7d0JBQ0MseU5BUUQ7d0JBQ0QsNEZBQTRGO3dCQUM1Riw2RkFBNkY7d0JBQzdGLDhGQUE4Rjt3QkFDOUYsK0ZBQStGO2lCQUdsRzs7OztnQkE5Q0MsVUFBVTtnQkFHVixTQUFTOzs7NEJBNkNSLFdBQVcsU0FBQyxPQUFPO3VCQUVuQixLQUFLOzhCQUNMLEtBQUs7d0JBRUwsS0FBSzt5QkFTTCxLQUFLOzBCQUtMLEtBQUs7O0lBc0JSLGlCQUFDO0NBQUEsQUFuRkQsSUFtRkM7U0ExQ1ksVUFBVTs7O0lBQ3JCLCtCQUE4Qzs7SUFFOUMsMEJBQXNCOztJQUN0QixpQ0FBNkI7O0lBcUI3QiwwQkFBb0I7Ozs7O0lBRXBCLGlDQUE4Qjs7SUFFbEIsZ0NBQTZCOzs7OztJQUFFLHlCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0b29sdGlwLWJveCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAqbmdJZj1cInRvb2x0aXBIdG1sOyBlbHNlIHR4dFwiIFtpbm5lckhUTUxdPVwidG9vbHRpcEh0bWxcIj48L2Rpdj5cbiAgICA8bmctdGVtcGxhdGUgI3R4dD57eyB0ZXh0IH19PC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ2ZhZGUnLCBbXG4gICAgICBzdGF0ZSgndmlzaWJsZScsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gICAgICBzdGF0ZSgnaW52aXNpYmxlJywgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ3Zpc2libGUgPD0+IGludmlzaWJsZScsIGFuaW1hdGUoJzMwMG1zIGxpbmVhcicpKSxcbiAgICBdKSxcbiAgXSxcbiAgc3R5bGVzOiBbXG4gICAgICBgXG4gICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7XG4gICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMjVweDtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICAgICAgICB6LWluZGV4OiAzO1xuICAgICAgICAgIH1cbiAgICBgLFxuICAgICAgYFxuICAgICAgICAgIDpob3N0Lmhhcy1hcnJvdzpiZWZvcmUge1xuICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgYm9yZGVyOiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgICB9XG4gICAgYCxcbiAgICAnOmhvc3QuaGFzLWFycm93LmFycm93LXRvcDpiZWZvcmUgeyBib3JkZXItYm90dG9tOiA1cHggc29saWQgcmdiYSgwLDAsMCwwLjgpOyB0b3A6IC0xMHB4OyB9JyxcbiAgICAnOmhvc3QuaGFzLWFycm93LmFycm93LWxlZnQ6YmVmb3JlIHsgYm9yZGVyLXJpZ2h0OiA1cHggc29saWQgcmdiYSgwLDAsMCwwLjgpOyBsZWZ0OiAtMTBweDsgfScsXG4gICAgJzpob3N0Lmhhcy1hcnJvdy5hcnJvdy1yaWdodDpiZWZvcmUgeyBib3JkZXItbGVmdDogNXB4IHNvbGlkIHJnYmEoMCwwLDAsMC44KTsgcmlnaHQ6IC0xMHB4OyB9JyxcbiAgICAnOmhvc3QuaGFzLWFycm93LmFycm93LWJvdHRvbTpiZWZvcmUgeyBib3JkZXItdG9wOiA1cHggc29saWQgcmdiYSgwLDAsMCwwLjgpOyBib3R0b206IC0xMHB4OyB9JyxcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBCb3ggaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQEhvc3RCaW5kaW5nKCdAZmFkZScpIGZhZGVTdGF0ZSA9ICdpbnZpc2libGUnO1xuXG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZztcbiAgQElucHV0KCkgdG9vbHRpcEh0bWw6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBzZXQgYXJyb3coc2lkZTogc3RyaW5nKSB7XG4gICAgdGhpcy5ybmQuc2V0QXR0cmlidXRlKFxuICAgICAgdGhpcy5nZXROYXRpdmVFbGVtZW50KCksXG4gICAgICAnY2xhc3MnLFxuICAgICAgJ2hhcy1hcnJvdyAnICsgJ2Fycm93LScgKyBzaWRlLFxuICAgICk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgcG9zVG9wKHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5ybmQuc2V0U3R5bGUodGhpcy5nZXROYXRpdmVFbGVtZW50KCksICd0b3AnLCB2YWwgKyAncHgnKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBwb3NMZWZ0KHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5ybmQuc2V0U3R5bGUodGhpcy5nZXROYXRpdmVFbGVtZW50KCksICdsZWZ0JywgdmFsICsgJ3B4Jyk7XG4gIH1cblxuICBpbml0OiBQcm9taXNlPHZvaWQ+O1xuXG4gIHByaXZhdGUgaW5pdFJlc29sdmU6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJuZDogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5pbml0ID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmluaXRSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldE5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmluaXRSZXNvbHZlKCk7XG4gIH1cbn1cbiJdfQ==