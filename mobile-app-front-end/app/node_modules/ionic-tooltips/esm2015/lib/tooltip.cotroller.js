/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TooltipController {
    constructor() {
        this.allowMultiple = true;
        this.activeTooltips = [];
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    addTooltip(instance) {
        if (instance.hideOthers || !this.allowMultiple && this.activeTooltips.length > 0) {
            this.hideAll();
        }
        this.activeTooltips.push(instance);
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    removeTooltip(instance) {
        this.activeTooltips.splice(this.activeTooltips.indexOf(instance), 1);
    }
    /**
     * @return {?}
     */
    hideAll() {
        this.activeTooltips.forEach((/**
         * @param {?} tooltip
         * @return {?}
         */
        (tooltip) => {
            tooltip.removeTooltip();
        }));
    }
}
TooltipController.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */ TooltipController.ngInjectableDef = i0.defineInjectable({ factory: function TooltipController_Factory() { return new TooltipController(); }, token: TooltipController, providedIn: "root" });
if (false) {
    /** @type {?} */
    TooltipController.prototype.allowMultiple;
    /** @type {?} */
    TooltipController.prototype.activeTooltips;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb3Ryb2xsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pb25pYy10b29sdGlwcy8iLCJzb3VyY2VzIjpbImxpYi90b29sdGlwLmNvdHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLGlCQUFpQjtJQUg5QjtRQUlFLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLG1CQUFjLEdBQXVCLEVBQUUsQ0FBQztLQWtCekM7Ozs7O0lBaEJDLFVBQVUsQ0FBQyxRQUEwQjtRQUNuQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoRixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7UUFDRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxRQUEwQjtRQUN0QyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7O0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTzs7OztRQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQ3hELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMxQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQXRCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7O0lBRUMsMENBQXFCOztJQUNyQiwyQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb29sdGlwRGlyZWN0aXZlIH0gZnJvbSAnLi90b29sdGlwLmRpcmVjdGl2ZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBUb29sdGlwQ29udHJvbGxlciB7XG4gIGFsbG93TXVsdGlwbGUgPSB0cnVlO1xuICBhY3RpdmVUb29sdGlwczogVG9vbHRpcERpcmVjdGl2ZVtdID0gW107XG5cbiAgYWRkVG9vbHRpcChpbnN0YW5jZTogVG9vbHRpcERpcmVjdGl2ZSkge1xuICAgIGlmIChpbnN0YW5jZS5oaWRlT3RoZXJzIHx8ICF0aGlzLmFsbG93TXVsdGlwbGUgJiYgdGhpcy5hY3RpdmVUb29sdGlwcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmhpZGVBbGwoKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmVUb29sdGlwcy5wdXNoKGluc3RhbmNlKTtcbiAgfVxuXG4gIHJlbW92ZVRvb2x0aXAoaW5zdGFuY2U6IFRvb2x0aXBEaXJlY3RpdmUpIHtcbiAgICB0aGlzLmFjdGl2ZVRvb2x0aXBzLnNwbGljZSh0aGlzLmFjdGl2ZVRvb2x0aXBzLmluZGV4T2YoaW5zdGFuY2UpLCAxKTtcbiAgfVxuXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy5hY3RpdmVUb29sdGlwcy5mb3JFYWNoKCh0b29sdGlwOiBUb29sdGlwRGlyZWN0aXZlKSA9PiB7XG4gICAgICB0b29sdGlwLnJlbW92ZVRvb2x0aXAoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19