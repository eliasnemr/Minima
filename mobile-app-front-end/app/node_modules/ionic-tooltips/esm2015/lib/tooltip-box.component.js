/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, Renderer2, } from '@angular/core';
export class TooltipBox {
    /**
     * @param {?} elementRef
     * @param {?} rnd
     */
    constructor(elementRef, rnd) {
        this.elementRef = elementRef;
        this.rnd = rnd;
        this.fadeState = 'invisible';
        this.init = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            this.initResolve = resolve;
        }));
    }
    /**
     * @param {?} side
     * @return {?}
     */
    set arrow(side) {
        this.rnd.setAttribute(this.getNativeElement(), 'class', 'has-arrow ' + 'arrow-' + side);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set posTop(val) {
        this.rnd.setStyle(this.getNativeElement(), 'top', val + 'px');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set posLeft(val) {
        this.rnd.setStyle(this.getNativeElement(), 'left', val + 'px');
    }
    /**
     * @return {?}
     */
    getNativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initResolve();
    }
}
TooltipBox.decorators = [
    { type: Component, args: [{
                selector: 'tooltip-box',
                template: `
    <div *ngIf="tooltipHtml; else txt" [innerHTML]="tooltipHtml"></div>
    <ng-template #txt>{{ text }}</ng-template>
  `,
                animations: [
                    trigger('fade', [
                        state('visible', style({ opacity: 1 })),
                        state('invisible', style({ opacity: 0 })),
                        transition('visible <=> invisible', animate('300ms linear')),
                    ]),
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
          :host {
              background-color: rgba(0, 0, 0, 0.8);
              color: white;
              display: inline-block;
              position: fixed;
              padding: 15px 25px;
              font-size: 15px;
              z-index: 3;
          }
    `,
                    `
          :host.has-arrow:before {
              content: '';
              border: 5px solid transparent;
              position: absolute;
              width: 0;
              height: 0;
          }
    `,
                    ':host.has-arrow.arrow-top:before { border-bottom: 5px solid rgba(0,0,0,0.8); top: -10px; }',
                    ':host.has-arrow.arrow-left:before { border-right: 5px solid rgba(0,0,0,0.8); left: -10px; }',
                    ':host.has-arrow.arrow-right:before { border-left: 5px solid rgba(0,0,0,0.8); right: -10px; }',
                    ':host.has-arrow.arrow-bottom:before { border-top: 5px solid rgba(0,0,0,0.8); bottom: -10px; }']
            }] }
];
/** @nocollapse */
TooltipBox.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipBox.propDecorators = {
    fadeState: [{ type: HostBinding, args: ['@fade',] }],
    text: [{ type: Input }],
    tooltipHtml: [{ type: Input }],
    arrow: [{ type: Input }],
    posTop: [{ type: Input }],
    posLeft: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TooltipBox.prototype.fadeState;
    /** @type {?} */
    TooltipBox.prototype.text;
    /** @type {?} */
    TooltipBox.prototype.tooltipHtml;
    /** @type {?} */
    TooltipBox.prototype.init;
    /**
     * @type {?}
     * @private
     */
    TooltipBox.prototype.initResolve;
    /** @type {?} */
    TooltipBox.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    TooltipBox.prototype.rnd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1ib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaW9uaWMtdG9vbHRpcHMvIiwic291cmNlcyI6WyJsaWIvdG9vbHRpcC1ib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQTJDdkIsTUFBTSxPQUFPLFVBQVU7Ozs7O0lBNkJyQixZQUFtQixVQUFzQixFQUFVLEdBQWM7UUFBOUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVc7UUE1QjNDLGNBQVMsR0FBRyxXQUFXLENBQUM7UUE2QjVDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxPQUFPOzs7O1FBQU8sT0FBTyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDN0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQTNCRCxJQUNJLEtBQUssQ0FBQyxJQUFZO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUNuQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFDdkIsT0FBTyxFQUNQLFlBQVksR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUMvQixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxJQUNJLE1BQU0sQ0FBQyxHQUFXO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Ozs7SUFFRCxJQUNJLE9BQU8sQ0FBQyxHQUFXO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7OztJQVlELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7O1lBbEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOzs7R0FHVDtnQkFDRCxVQUFVLEVBQUU7b0JBQ1YsT0FBTyxDQUFDLE1BQU0sRUFBRTt3QkFDZCxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUN2QyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUN6QyxVQUFVLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO3FCQUM3RCxDQUFDO2lCQUNIO2dCQTJCRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTt5QkF6QjNDOzs7Ozs7Ozs7O0tBVUQ7b0JBQ0M7Ozs7Ozs7O0tBUUQ7b0JBQ0QsNEZBQTRGO29CQUM1Riw2RkFBNkY7b0JBQzdGLDhGQUE4RjtvQkFDOUYsK0ZBQStGO2FBR2xHOzs7O1lBOUNDLFVBQVU7WUFHVixTQUFTOzs7d0JBNkNSLFdBQVcsU0FBQyxPQUFPO21CQUVuQixLQUFLOzBCQUNMLEtBQUs7b0JBRUwsS0FBSztxQkFTTCxLQUFLO3NCQUtMLEtBQUs7Ozs7SUFuQk4sK0JBQThDOztJQUU5QywwQkFBc0I7O0lBQ3RCLGlDQUE2Qjs7SUFxQjdCLDBCQUFvQjs7Ozs7SUFFcEIsaUNBQThCOztJQUVsQixnQ0FBNkI7Ozs7O0lBQUUseUJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgc3RhdGUsIHN0eWxlLCB0cmFuc2l0aW9uLCB0cmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Rvb2x0aXAtYm94JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2ICpuZ0lmPVwidG9vbHRpcEh0bWw7IGVsc2UgdHh0XCIgW2lubmVySFRNTF09XCJ0b29sdGlwSHRtbFwiPjwvZGl2PlxuICAgIDxuZy10ZW1wbGF0ZSAjdHh0Pnt7IHRleHQgfX08L25nLXRlbXBsYXRlPlxuICBgLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcignZmFkZScsIFtcbiAgICAgIHN0YXRlKCd2aXNpYmxlJywgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKSxcbiAgICAgIHN0YXRlKCdpbnZpc2libGUnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICAgICAgdHJhbnNpdGlvbigndmlzaWJsZSA8PT4gaW52aXNpYmxlJywgYW5pbWF0ZSgnMzAwbXMgbGluZWFyJykpLFxuICAgIF0pLFxuICBdLFxuICBzdHlsZXM6IFtcbiAgICAgIGBcbiAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcbiAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAyNXB4O1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgICAgIHotaW5kZXg6IDM7XG4gICAgICAgICAgfVxuICAgIGAsXG4gICAgICBgXG4gICAgICAgICAgOmhvc3QuaGFzLWFycm93OmJlZm9yZSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICBib3JkZXI6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICAgIH1cbiAgICBgLFxuICAgICc6aG9zdC5oYXMtYXJyb3cuYXJyb3ctdG9wOmJlZm9yZSB7IGJvcmRlci1ib3R0b206IDVweCBzb2xpZCByZ2JhKDAsMCwwLDAuOCk7IHRvcDogLTEwcHg7IH0nLFxuICAgICc6aG9zdC5oYXMtYXJyb3cuYXJyb3ctbGVmdDpiZWZvcmUgeyBib3JkZXItcmlnaHQ6IDVweCBzb2xpZCByZ2JhKDAsMCwwLDAuOCk7IGxlZnQ6IC0xMHB4OyB9JyxcbiAgICAnOmhvc3QuaGFzLWFycm93LmFycm93LXJpZ2h0OmJlZm9yZSB7IGJvcmRlci1sZWZ0OiA1cHggc29saWQgcmdiYSgwLDAsMCwwLjgpOyByaWdodDogLTEwcHg7IH0nLFxuICAgICc6aG9zdC5oYXMtYXJyb3cuYXJyb3ctYm90dG9tOmJlZm9yZSB7IGJvcmRlci10b3A6IDVweCBzb2xpZCByZ2JhKDAsMCwwLDAuOCk7IGJvdHRvbTogLTEwcHg7IH0nLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVG9vbHRpcEJveCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASG9zdEJpbmRpbmcoJ0BmYWRlJykgZmFkZVN0YXRlID0gJ2ludmlzaWJsZSc7XG5cbiAgQElucHV0KCkgdGV4dDogc3RyaW5nO1xuICBASW5wdXQoKSB0b29sdGlwSHRtbDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHNldCBhcnJvdyhzaWRlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJuZC5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLmdldE5hdGl2ZUVsZW1lbnQoKSxcbiAgICAgICdjbGFzcycsXG4gICAgICAnaGFzLWFycm93ICcgKyAnYXJyb3ctJyArIHNpZGUsXG4gICAgKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBwb3NUb3AodmFsOiBudW1iZXIpIHtcbiAgICB0aGlzLnJuZC5zZXRTdHlsZSh0aGlzLmdldE5hdGl2ZUVsZW1lbnQoKSwgJ3RvcCcsIHZhbCArICdweCcpO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHBvc0xlZnQodmFsOiBudW1iZXIpIHtcbiAgICB0aGlzLnJuZC5zZXRTdHlsZSh0aGlzLmdldE5hdGl2ZUVsZW1lbnQoKSwgJ2xlZnQnLCB2YWwgKyAncHgnKTtcbiAgfVxuXG4gIGluaXQ6IFByb21pc2U8dm9pZD47XG5cbiAgcHJpdmF0ZSBpbml0UmVzb2x2ZTogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcm5kOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLmluaXQgPSBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuaW5pdFJlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0TmF0aXZlRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5pdFJlc29sdmUoKTtcbiAgfVxufVxuIl19